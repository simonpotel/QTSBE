openapi: 3.0.0
info:
  title: QTSBE API
  description: Quantitative Trading Strategy Backtesting Environment API
  version: 1.0.0
  contact:
    name: Simon
    url: https://www.github.com/simonpotel

servers:
  - url: http://127.0.0.1:5002
    description: Local development server

tags:
  - name: Analysis
    description: Strategy analysis endpoints
  - name: Tokens
    description: Token management endpoints
  - name: Strategies
    description: Trading strategy endpoints

paths:
  /QTSBE/analyse:
    get:
      tags:
        - Analysis
      summary: Run strategy analysis
      description: Execute a backtesting analysis using specified parameters
      parameters:
        - name: pair
          in: query
          required: true
          schema:
            type: string
          description: Trading pair to analyze
          example: "BTC/USDC"
        - name: strategy
          in: query
          required: true
          schema:
            type: string
          description: Name of the strategy to analyze
          example: "rsi_example"
        - name: start_ts
          in: query
          required: false
          schema:
            type: string
          description: Start timestamp (format YYYY-MM-DD HH:mm:ss)
          example: "2024-01-01 00:00:00"
        - name: end_ts
          in: query
          required: false
          schema:
            type: string
          description: End timestamp (format YYYY-MM-DD HH:mm:ss)
          example: "2024-02-24 00:00:00"
        - name: multi_positions
          in: query
          required: false
          schema:
            type: boolean
          description: Enable multiple positions
          example: false
        - name: details
          in: query
          required: false
          schema:
            type: string
          description: Include detailed data in response
          example: "True"
        - name: position_type
          in: query
          required: false
          schema:
            type: string
            enum: [long, short]
          description: Type of position analysis (long or short)
          example: "long"
      responses:
        '200':
          description: Successful analysis
          content:
            application/json:
              schema:
                type: object
                properties:
                  pair:
                    type: string
                    example: "Binance_BTCUSDC_1d"
                  strategy:
                    type: string
                    example: "rsi_example"
                  data:
                    type: array
                    description: Raw data (only included if details=True)
                    items:
                      type: array
                      items:
                        oneOf:
                          - type: string
                          - type: number
                  result:
                    type: array
                    items:
                      oneOf:
                        - type: array  # indicators
                          description: Indicators data (only if details=True)
                        - type: array  # positions
                          description: Position data
                        - type: array  # current_positions
                          description: Current positions
                  stats:
                    type: object
                    properties:
                      drawdown:
                        type: object
                        properties:
                          max_drawdown:
                            type: number
                          average_drawdown:
                            type: number
                      positions:
                        type: object
                        properties:
                          average_ratio:
                            type: number
                          final_cumulative_ratio:
                            type: number
                          average_position_duration:
                            type: number
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "pair and strategy parameters are required"
        '404':
          description: Data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No data found for pair BTC/USDC"

  /QTSBE/analyse_custom:
    post:
      tags:
        - Analysis
      summary: Run custom strategy analysis
      description: Execute a backtesting analysis with custom strategy code
      parameters:
        - name: pair
          in: query
          required: true
          schema:
            type: string
          description: Trading pair to analyze
          example: "Binance_BTCUSDC_1d"
        - name: start_ts
          in: query
          required: false
          schema:
            type: string
          description: Start timestamp (format YYYY-MM-DD HH:mm:ss)
          example: "2024-01-01 00:00:00"
        - name: end_ts
          in: query
          required: false
          schema:
            type: string
          description: End timestamp (format YYYY-MM-DD HH:mm:ss)
          example: "2024-02-24 00:00:00"
        - name: multi_positions
          in: query
          required: false
          schema:
            type: boolean
          description: Enable multiple positions
          example: false
        - name: details
          in: query
          required: false
          schema:
            type: string
          description: Include detailed data in response
          example: "True"
        - name: position_type
          in: query
          required: false
          schema:
            type: string
            enum: [long, short]
          description: Type of position analysis (long or short)
          example: "long"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - strategy_code
              properties:
                strategy_code:
                  type: string
                  description: Python code implementing the custom strategy
                  example: |
                    import numpy as np

                    # Article to understand the RSI : https://admiralmarkets.com/fr/formation/articles/indicateurs-forex/indicateur-rsi

                    def get_RSI(prices, window=14):
                        """
                        Calculate the Relative Strength Index (RSI) for a given price series.

                        Parameters:
                        prices (list or array-like): List or array of price data.
                        window (int): The window size for the RSI calculation. Default is 14.

                        Returns:
                        numpy.ndarray: An array containing the RSI values for the given price series. (NB: You must convert it to use it in a Python List)
                        """
                        
                        deltas = np.diff(prices) # tab of price differences between consecutive days
                        seed = deltas[:window+1]
                        
                        # caverage gain and loss over the window period
                        up = seed[seed >= 0].sum() / window
                        down = -seed[seed < 0].sum() / window
                        
                        rs = up / down # calculate the initial Relative Strength (RS)
                        rsi = np.zeros_like(prices) # create the RSI array with zeros, the same length as prices
                        rsi[:window] = 100. - 100. / (1. + rs) # set the first window RSI values using the initial RS calculation
                        for i in range(window, len(prices)): # calculate RSI for the rest of the prices using a iterrative while
                            delta = deltas[i - 1]  # get the price change for the current period
                            # determine the gain (upval) and loss (downval) for the current period
                            if delta > 0:
                                upval = delta
                                downval = 0.
                            else:
                                upval = 0.
                                downval = -delta
                            # update the average gain and loss with the current values
                            up = (up * (window - 1) + upval) / window
                            down = (down * (window - 1) + downval) / window

                            rs = up / down
                            rsi[i] = 100. - 100. / (1. + rs)

                        return rsi


                    # This example of analysis shows you 
                    # how you can use an indicator along with classes and functions of QTSBE
                    # to create your own strategy.

                    # ⚠️⚠️⚠️ Note that this is an example that does not actually work in the market, 
                    # as it is based only on a single indicator and a price check that I implemented for selling to avoid losing money. 
                    # This is why, if you run this example on BTCUSDC since 2018, 
                    # you will only have 20 transactions and only a 3x increase in your capital over 6 years. 

                    class Indicators(object):
                        def __init__(self, data):
                            self.data = data
                            self.indicators = self.calculate_indicators()

                        def calculate_indicators(self):
                            data_open = [row[1] for row in self.data]

                            indicators = {
                                "RSI": get_RSI(data_open),
                            }
                            return {k: list(v) for k, v in indicators.items()}


                    def buy_signal(open_position, data, index_check, indicators, current_price=None):
                        if current_price is not None: data[index_check][4] = current_price
                        if indicators["RSI"][index_check] is None:
                            return -2, None
                        if indicators["RSI"][index_check] < 40:
                            return 1, data[index_check][4]
                        return 0, None


                    def sell_signal(open_position, data, index_check, indicators, current_price=None):
                        if current_price is not None: data[index_check][4] = current_price
                        if indicators["RSI"][index_check] is None:
                            return -1, None
                        if open_position.get('buy_signal') == 1 or open_position.get('buy_signals', {}).get('Buy_Signal') == 1:
                            if open_position['buy_index'] < index_check < len(data):
                                if indicators["RSI"][index_check] > 50 and data[index_check][2] / open_position['buy_price'] > 1.10:
                                    return 1, data[index_check][4]
                        return 0, None

      responses:
        '200':
          description: Successful analysis
          content:
            application/json:
              schema:
                type: object
                properties:
                  pair:
                    type: string
                    example: "BTC/USDC"
                  strategy:
                    type: string
                    example: "custom"
                  data:
                    type: array
                    description: Raw data (only included if details=True)
                    items:
                      type: array
                      items:
                        oneOf:
                          - type: string
                          - type: number
                  result:
                    type: array
                    items:
                      oneOf:
                        - type: array  # indicators
                          description: Indicators data (only if details=True)
                        - type: array  # positions
                          description: Position data
                        - type: array  # current_positions
                          description: Current positions
                  stats:
                    type: object
                    properties:
                      drawdown:
                        type: object
                        properties:
                          max_drawdown:
                            type: number
                          average_drawdown:
                            type: number
                      positions:
                        type: object
                        properties:
                          average_ratio:
                            type: number
                          final_cumulative_ratio:
                            type: number
                          average_position_duration:
                            type: number
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "pair and strategy_code are required"

  /QTSBE/get_tokens:
    get:
      tags:
        - Tokens
      summary: Get available tokens
      description: Retrieve a list of all available trading tokens/pairs
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["BTC/USDC", "ETH/USDC", "BNB/USDC"]
        '500':
          description: Internal server error
          
  /QTSBE/get_strategies:
    get:
      tags:
        - Strategies
      summary: List available strategies
      description: Get a list of all implemented trading strategies
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["rsi_example", "moving_average", "default"]
        '500':
          description: Internal server error 